## Compose V2: version field is obsolete and ignored; removing to avoid warnings

services:
  # Existing services
  fuseki:
    image: stain/jena-fuseki
    ports: ["3030:3030"]
    environment:
      - ADMIN_PASSWORD=admin
    volumes:
      - ../ontology:/fuseki/ontology
    networks:
      - lww-network

  fuseki_seed:
    image: curlimages/curl:8.8.0
    depends_on:
      - fuseki
    volumes:
      - ../ontology/seed.ttl:/data/seed.ttl:ro
    command:
      - /bin/sh
      - -c
      - |
          set -ex
          for i in $$(seq 1 30); do
            if curl -sf http://fuseki:3030/$$/ping >/dev/null; then
              break
            fi
            echo "Waiting for Fuseki ($$i/30)..."
            sleep 2
          done
          curl -sf -u admin:admin -H 'Content-Type: application/x-www-form-urlencoded' \
            -X POST http://fuseki:3030/$$/datasets --data 'dbName=lww&dbType=tdb2' || true
          curl -sf -u admin:admin -X POST http://fuseki:3030/lww/data \
            -H 'Content-Type: text/turtle' --data-binary @/data/seed.ttl || true
    networks:
      - lww-network

  mqtt:
    image: eclipse-mosquitto
    ports: ["1883:1883"]
    networks:
      - lww-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    ports: ["3306:3306"]
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: lankawattwise
      MYSQL_USER: lww_user
      MYSQL_PASSWORD: lww_pass
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - lww-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports: ["9095:9090"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - lww-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports: ["3000:3000"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - lww-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"   # zipkin.thrift compact
      - "6831:6831/udp"   # jaeger.thrift compact
      - "6832:6832/udp"   # jaeger.thrift binary
      - "5778:5778"       # serve configs
      - "16686:16686"     # UI
      - "14268:14268"     # jaeger.thrift directly from clients
      - "14250:14250"     # gRPC
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    networks:
      - lww-network

  lww_api_gateway:
    build:
      context: ../ballerina
      dockerfile: Dockerfile
    ports: 
      - "9094:9090"  # GraphQL (container 9090) exposed on host 9094 to avoid conflict with Prometheus 9090
      - "9080:9080"  # UI Gateway
      - "8094:8094"  # Reports service
      - "9797:9797"  # Prometheus metrics endpoint
    depends_on:
      - fuseki
      - fuseki_seed
      - mqtt
      - mysql
      - jaeger
      - prometheus
    environment:
      - BALLERINA_CONFIG_FILE=Config.toml
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    networks:
      - lww-network

networks:
  lww-network:
    driver: bridge

volumes:
  mysql-data:
  prometheus-data:
  grafana-data:
